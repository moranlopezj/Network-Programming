import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class GameServer {

	// All client names, so we can check for duplicates upon registration.
	private static Set<String> names = new HashSet<>();

	// The set of all the print writers for all the clients, used for broadcast.
	private static Set<PrintWriter> writers = new HashSet<>();

	public static void main(String[] args) throws Exception {
		System.out.println("The game is running...");
		ExecutorService pool = Executors.newFixedThreadPool(500);
		try (ServerSocket listener = new ServerSocket(59001)) {
			while (true) {
				pool.execute(new Handler(listener.accept()));
			}
		}
	}

	/**
	 * The client handler task.
	 */
	private static class Handler implements Runnable {
		private String name;
		private Socket socket;
		private Scanner in;
		private PrintWriter out;

		/**
		 * Constructs a handler thread, squirreling away the socket. All the interesting
		 * work is done in the run method. Remember the constructor is called from the
		 * server's main method, so this has to be as short as possible.
		 */
		public Handler(Socket socket) {
			this.socket = socket;
		}

		/**
		 * Services this thread's client by repeatedly requesting a screen name until a
		 * unique one has been submitted, then acknowledges the name and registers the
		 * output stream for the client in a global set, then repeatedly gets inputs and
		 * broadcasts them.
		 */
		public void run() {
			try {
				in = new Scanner(socket.getInputStream());
				out = new PrintWriter(socket.getOutputStream(), true);
				
					Deck d = new Deck();
					
					out.printf("%nWelcome to BlackJack%n%n");
					out.printf("How many human players? ");
					int numPlayers = in.nextInt();
					
					ArrayList<GenericPlayer> players = new ArrayList<>(numPlayers++);
					
					for(int i = 0; i < numPlayers; i ++) {
						String name = in.next();
						Player p = new Player(name);
						players.add(p);
					}
					House h = new House();
					players.add(h);
					
					//deal two cars to everyone
					for(int i = 0; i < players.size(); i++) {
						GenericPlayer p = players.get(i);
						d.draw(p);//first card
						d.draw(p);//second card
						if(p instanceof House) {
							House house = (House) p;
							house.flipFirstCard();
						}
						out.printf("%s", p);
					}
					
					//play the game (ask everyone what they want to do)
					for(GenericPlayer p : players) {	
						if(p instanceof House) {
							House house = (House) p;
							house.flipFirstCard();
						}
						while (!p.isBusted()) {
							if(p.isHitting(input)) {
								d.draw(p);
								System.out.printf("%s", p);
							}else {
							   break;//pull you out of the while loop
							}
							if(p.getValue()>21) {
								p.busted();
							}
						}
					}
					
					//display the final hands of everyone
					System.out.printf("%nFinal Hands%n");
					for(int i = 0; i < players.size();i ++) {
						GenericPlayer p = players.get(i);
						out.printf("%s", p);
					}
					//lazy
					int houseValue = h.getValue();
					//display the final result (who wins, lost and pushed)
					System.out.printf("%nFinal Results%n");
					for(GenericPlayer p : players) {
						if(p instanceof House) {
							continue; //moves to the next iteration of the closest loop
						}
						if (p instanceof Player) {
							Player player = (Player) p;
							if(!player.isBusted() && (player.getValue()>houseValue || houseValue>21)){
								player.win();
							}else if(!player.isBusted() && player.getValue() == houseValue) {
								player.push();
							}else {
								player.lose();
							}
						}
					}
				}
			}
	}
}
